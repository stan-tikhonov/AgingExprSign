sanya_expr = sanya_expr %>% remove_rownames %>% column_to_rownames(var="ID")
sanya_expr = subset(sanya_expr, select = -c(X))
sanya_pheno = read.table("Sanya_rnaseq_pheno.txt", sep = "\t")
sanya_pheno = subset(sanya_pheno, grepl("^kidney.*", V2))
sanya_expr = sanya_expr[, as.character(sanya_pheno$V1)]
sanya_expr = na.omit(sanya_expr)
filteredexprdata = sanya_expr
filteredphenodata = sanya_pheno
filteredphenodata = filteredphenodata[-5,] #32m_1 kidney
filteredphenodata$V1 = trimws(as.character(filteredphenodata$V1))
filteredexprdata = filteredexprdata[, filteredphenodata$V1]
filteredphenodata = filteredphenodata %>% separate(V2, c("Tissue", "Age", NA))
View(filteredphenodata)
filteredexprdata$rowsum = rowSums(filteredexprdata > 10)
filteredexprdata1 = filteredexprdata[filteredexprdata$rowsum > 3,]
filteredexprdata1 = subset(filteredexprdata1, select = -c(rowsum))
logdata = log2(filteredexprdata1 + 1)
filteredexprstack = stack(logdata)
ggplot(filteredexprstack, aes=(x=values)) + geom_density(aes(x=values, group=ind, color=ind))
normdata = RLE_normalization(logdata)
keknames = sub("_(.*)$", "", rownames(normdata))
rownames(normdata) = keknames
dic = Ensembl_mouse_dictionary_create(normdata)
normdata = Ensembl_to_entrez(normdata, dic)
exprforpca = data.frame(t(scale(t(normdata))))
pcamodel = prcomp(t(exprforpca))
cluster_values = as.data.frame(pcamodel[['x']])
cluster_plot = ggplot(cluster_values, aes(x = PC1, y = PC2))
color_pca = filteredphenodata[, "Age"]
cluster_plot + geom_point(aes(color = color_pca))
keknames = sub("_(.*)$", "", rownames(filteredexprdata1))
rownames(filteredexprdata1) = keknames
dic = Ensembl_mouse_dictionary_create(filteredexprdata1)
filteredexprdata1 = Ensembl_to_entrez(filteredexprdata1, dic)
filteredphenodata$Age = sub("m$", "", filteredphenodata$Age)
filteredphenodata$Age = as.integer(filteredphenodata$Age)
View(filteredphenodata)
design_matrix = model.matrix(~ filteredphenodata$Age)
rownames(design_matrix) = filteredphenodata$V1
colnames(design_matrix) <- c("(Intercept)", "Age")
View(design_matrix)
edger_matrix = DGEList(filteredexprdata1)
edger_matrix = calcNormFactors(edger_matrix, method = "RLE")
edger_matrix = estimateDisp(edger_matrix, design_matrix, robust = TRUE)
fit = glmFit(edger_matrix, design_matrix)
result <- topTags(glmLRT(fit,coef="Age"),n=Inf,adjust.method = "BH")$table
View(result)
sanya_kidney_3ages = result
alex_signatures = dget("Signatures_mouse_genes.R")
View(alex_signatures)
alex_signatures$Species
logFCmatrix = sanya_kidney_3ages[1,]
View(logFCmatrix)
logFCmatrix = sanya_kidney_3ages[,1]
logFCmatrix = sanya_kidney_3ages$logFC
logFCmatrix = sanya_kidney_3ages["logFC"]
View(logFCmatrix)
library(tidyverse)
logFCmatrix = logFCmatrix %>% rename(sanya_kidney = logFC)
View(logFCmatrix)
?merge()
logFCmatrix = merge(logFCmatrix, sanya_liver_6ages)
logFCmatrix = merge(logFCmatrix, sanya_liver_6ages, by=0)
View(logFCmatrix)
logFCmatrix = sanya_kidney_3ages["logFC"]
logFCmatrix = logFCmatrix %>% rename(sanya_kidney = logFC)
logFCmatrix = merge(logFCmatrix, sanya_liver_6ages["logFC"], by=0)
View(logFCmatrix)
logFCmatrix = logFCmatrix %>% column_to_rownames(var = "Row.names")
View(logFCmatrix)
logFCmatrix = logFCmatrix %>% rename(sanya_liver = logFC)
View(logFCmatrix)
for (el in alex_signatures$Species):{
print el
break
}
for (el in alex_signatures$Species){
print el
break
}
for (el in alex_signatures$Species){
el
break
}
for (el in alex_signatures$Species){
print(el)
break
}
?names()
names(alex_signatures$Species$Liver)
names(alex_signatures$Species)
i = 1
for (el in alex_signatures$Species){
logFCmatrix = merge(logFCmatrix, el["logFC"], by=0)
logFCmatrix = logFCmatrix %>% column_to_rownames(var = "Row.names")
logFCmatrix = logFCmatrix %>% rename(names(alex_signatures)[i] = logFC)
i = i + 1
}
View(logFCmatrix)
i = 1
for (el in alex_signatures$Species){
logFCmatrix = merge(logFCmatrix, el["logFC"], by=0)
logFCmatrix = logFCmatrix %>% column_to_rownames(var = "Row.names")
logFCmatrix = logFCmatrix %>% rename(as.name(names(alex_signatures$Species)[i]) = logFC)
i = i + 1
}
as.name(alex_signatures$Species[1])
as.name(names(alex_signatures$Species)[1])
logFCmatrix = merge(logFCmatrix, alex_signatures$Species[[1]]["logFC"], by=0)
View(logFCmatrix)
el
logFCmatrix = sanya_kidney_3ages["logFC"]
logFCmatrix = logFCmatrix %>% rename(sanya_kidney = logFC)
logFCmatrix = merge(logFCmatrix, sanya_liver_6ages["logFC"], by=0)
logFCmatrix = logFCmatrix %>% column_to_rownames(var = "Row.names")
logFCmatrix = logFCmatrix %>% rename(sanya_liver = logFC)
library(tidyverse)
logFCmatrix = sanya_kidney_3ages["logFC"]
logFCmatrix = logFCmatrix %>% rename(sanya_kidney = logFC)
logFCmatrix = merge(logFCmatrix, sanya_liver_6ages["logFC"], by=0)
logFCmatrix = logFCmatrix %>% column_to_rownames(var = "Row.names")
logFCmatrix = logFCmatrix %>% rename(sanya_liver = logFC)
View(logFCmatrix)
for (el in alex_signatures$Species){break}
logFCmatrix = merge(logFCmatrix, el["logFC"], by=0)
View(logFCmatrix)
logFCmatrix = logFCmatrix %>% column_to_rownames(var = "Row.names")
View(logFCmatrix)
logFCmatrix = logFCmatrix %>% rename(as.name(names(alex_signatures$Species)[1]) = logFC)
logFCmatrix = logFCmatrix %>% rename(names(alex_signatures$Species)[1] = logFC)
logFCmatrix = logFCmatrix %>% rename(as.name(as.name(names(alex_signatures$Species)[1])) = logFC)
logFCmatrix = logFCmatrix %>% rename(alex_signatures$Species)[1] = logFC)
logFCmatrix = logFCmatrix %>% rename(alex_signatures$Species[1] = logFC)
logFCmatrix = logFCmatrix %>% rename(alex_signatures$Species[1]"" = logFC)
logFCmatrix = logFCmatrix %>% rename(as.character(alex_signatures$Species[1]) = logFC)
logFCmatrix = logFCmatrix %>% rename(as.name(as.character(alex_signatures$Species[1])) = logFC)
logFCmatrix = logFCmatrix %>% rename($(alex_signatures$Species[1]) = logFC)
logFCmatrix = logFCmatrix %>% rename(paste(alex_signatures$Species[1]) = logFC)
logFCmatrix = logFCmatrix %>% rename_at(vars(alex_signatures$Species[1]) = funs("logFC"))
View(logFCmatrix)
logFCmatrix = sanya_kidney_3ages["logFC"]
logFCmatrix = logFCmatrix %>% rename(sanya_kidney = logFC)
logFCmatrix = merge(logFCmatrix, sanya_liver_6ages["logFC"], by=0)
logFCmatrix = logFCmatrix %>% column_to_rownames(var = "Row.names")
logFCmatrix = logFCmatrix %>% rename(sanya_liver = logFC)
i = 1
for (el in alex_signatures$Species){
logFCmatrix = merge(logFCmatrix, el["logFC"], by=0)
logFCmatrix = logFCmatrix %>% column_to_rownames(var = "Row.names")
colnames(logFCmatrix)[i] = names(alex_signatures$Species)[i]
i = i + 1
}
View(logFCmatrix)
logFCmatrix = sanya_kidney_3ages["logFC"]
logFCmatrix = logFCmatrix %>% rename(sanya_kidney = logFC)
logFCmatrix = merge(logFCmatrix, sanya_liver_6ages["logFC"], by=0)
logFCmatrix = logFCmatrix %>% column_to_rownames(var = "Row.names")
logFCmatrix = logFCmatrix %>% rename(sanya_liver = logFC)
i = 1
for (el in alex_signatures$Species){
logFCmatrix = merge(logFCmatrix, el["logFC"], by=0)
logFCmatrix = logFCmatrix %>% column_to_rownames(var = "Row.names")
colnames(logFCmatrix)[i + 2] = names(alex_signatures$Species)[i]
i = i + 1
}
View(logFCmatrix)
i = 1
for (el in alex_signatures$Interventions){
logFCmatrix = merge(logFCmatrix, el["logFC"], by=0)
logFCmatrix = logFCmatrix %>% column_to_rownames(var = "Row.names")
colnames(logFCmatrix)[i + 5] = names(alex_signatures$Interventions)[i]
i = i + 1
}
View(logFCmatrix)
View(alex_signatures)
View(sanya_kidney_3ages)
cormatrix <- round(cor(logFCmatrix),2)
View(cormatrix)
?cor()
cormatrix <- round(cor(logFCmatrix, method = "spearman"),2)
View(cormatrix)
library(reshape2)
library(reshape2)
# Reorder the correlation matrix
cormatrix <- reorder_cormat(cormatrix)
upper_tri <- get_upper_tri(cormatrix)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Spearman\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
# Reorder the correlation matrix
cormatrix <- reorder_cormat(cormatrix)
upper_tri <- get_upper_tri(cormatrix)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Spearman\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggheatmap
sanya_expr = read.csv("RNA_combined_stranded_counts.csv")
sanya_expr = sanya_expr %>% remove_rownames %>% column_to_rownames(var="ID")
sanya_expr = subset(sanya_expr, select = -c(X))
sanya_pheno = read.table("Sanya_rnaseq_pheno.txt", sep = "\t")
sanya_pheno = subset(sanya_pheno, grepl("^kidney.*", V2))
library(tidyverse)
sanya_expr = sanya_expr[, as.character(sanya_pheno$V1)]
sanya_expr = na.omit(sanya_expr)
filteredexprdata = sanya_expr
filteredphenodata = sanya_pheno
filteredphenodata = filteredphenodata[-5,] #32m_1 kidney
filteredphenodata$V1 = trimws(as.character(filteredphenodata$V1))
filteredexprdata = filteredexprdata[, filteredphenodata$V1]
filteredphenodata = filteredphenodata %>% separate(V2, c("Tissue", "Age", NA))
filteredexprdata$rowsum = rowSums(filteredexprdata > 10)
filteredexprdata1 = filteredexprdata[filteredexprdata$rowsum > 3,]
filteredexprdata1 = subset(filteredexprdata1, select = -c(rowsum))
logdata = log2(filteredexprdata1 + 1)
filteredexprstack = stack(logdata)
ggplot(filteredexprstack, aes=(x=values)) + geom_density(aes(x=values, group=ind, color=ind))
library(edgeR)
normdata = RLE_normalization(logdata)
View(filteredexprstack)
View(filteredexprstack)
filteredexprstack = stack(normdata)
ggplot(filteredexprstack, aes=(x=values)) + geom_density(aes(x=values, group=ind, color=ind))
sanya_expr = read.csv("RNA_combined_stranded_counts.csv")
sanya_expr = sanya_expr %>% remove_rownames %>% column_to_rownames(var="ID")
sanya_expr = subset(sanya_expr, select = -c(X))
sanya_pheno = read.table("Sanya_rnaseq_pheno.txt", sep = "\t")
sanya_pheno = subset(sanya_pheno, grepl("^kidney.*", V2))
sanya_expr = sanya_expr[, as.character(sanya_pheno$V1)]
sanya_expr = na.omit(sanya_expr)
filteredexprdata = sanya_expr
filteredphenodata = sanya_pheno
filteredphenodata = filteredphenodata[-5,] #32m_1 kidney
filteredphenodata$V1 = trimws(as.character(filteredphenodata$V1))
filteredexprdata = filteredexprdata[, filteredphenodata$V1]
filteredphenodata = filteredphenodata %>% separate(V2, c("Tissue", "Age", NA))
filteredexprdata$rowsum = rowSums(filteredexprdata > 10)
filteredexprdata1 = filteredexprdata[filteredexprdata$rowsum > 3,]
filteredexprdata1 = subset(filteredexprdata1, select = -c(rowsum))
logdata = log2(filteredexprdata1 + 1)
filteredexprstack = stack(logdata)
ggplot(filteredexprstack, aes=(x=values)) + geom_density(aes(x=values, group=ind, color=ind))
normdata = RLE_normalization(logdata)
filteredexprstack = stack(normdata)
ggplot(filteredexprstack, aes=(x=values)) + geom_density(aes(x=values, group=ind, color=ind))
sanya_expr = read.csv("RNA_combined_stranded_counts.csv")
sanya_expr = sanya_expr %>% remove_rownames %>% column_to_rownames(var="ID")
sanya_expr = subset(sanya_expr, select = -c(X))
sanya_pheno = read.table("Sanya_rnaseq_pheno.txt", sep = "\t")
sanya_pheno = subset(sanya_pheno, grepl("^liver.*", V2))
sanya_expr = sanya_expr[, as.character(sanya_pheno$V1)]
sanya_expr = na.omit(sanya_expr)
filteredexprdata = sanya_expr
filteredphenodata = sanya_pheno
filteredphenodata = filteredphenodata[-18,] #32m_1 liver
filteredphenodata$V1 = trimws(as.character(filteredphenodata$V1))
filteredexprdata = filteredexprdata[, filteredphenodata$V1]
filteredphenodata = filteredphenodata %>% separate(V2, c("Tissue", "Age", NA))
filteredexprdata$rowsum = rowSums(filteredexprdata > 10)
filteredexprdata1 = filteredexprdata[filteredexprdata$rowsum > 3,]
filteredexprdata1 = subset(filteredexprdata1, select = -c(rowsum))
logdata = log2(filteredexprdata1 + 1)
filteredexprstack = stack(logdata)
ggplot(filteredexprstack, aes=(x=values)) + geom_density(aes(x=values, group=ind, color=ind))
normdata = RLE_normalization(logdata)
filteredexprstack = stack(normdata)
ggplot(filteredexprstack, aes=(x=values)) + geom_density(aes(x=values, group=ind, color=ind))
keknames = sub("_(.*)$", "", rownames(normdata))
rownames(normdata) = keknames
dic = Ensembl_mouse_dictionary_create(normdata)
dic = Ensembl_mouse_dictionary_create(normdata)
normdata = Ensembl_to_entrez(normdata, dic)
exprforpca = data.frame(t(scale(t(normdata))))
pcamodel = prcomp(t(exprforpca))
cluster_values = as.data.frame(pcamodel[['x']])
cluster_plot = ggplot(cluster_values, aes(x = PC1, y = PC2))
color_pca = filteredphenodata[, "Age"]
cluster_plot + geom_point(aes(color = color_pca))
sanya_expr = read.csv("RNA_combined_stranded_counts.csv")
sanya_expr = sanya_expr %>% remove_rownames %>% column_to_rownames(var="ID")
sanya_expr = subset(sanya_expr, select = -c(X))
sanya_pheno = read.table("Sanya_rnaseq_pheno.txt", sep = "\t")
sanya_pheno = subset(sanya_pheno, grepl("^kidney.*", V2))
sanya_expr = sanya_expr[, as.character(sanya_pheno$V1)]
sanya_expr = na.omit(sanya_expr)
filteredexprdata = sanya_expr
filteredphenodata = sanya_pheno
filteredphenodata = filteredphenodata[-5,] #32m_1 kidney
filteredphenodata$V1 = trimws(as.character(filteredphenodata$V1))
filteredexprdata = filteredexprdata[, filteredphenodata$V1]
filteredphenodata = filteredphenodata %>% separate(V2, c("Tissue", "Age", NA))
filteredexprdata$rowsum = rowSums(filteredexprdata > 10)
filteredexprdata1 = filteredexprdata[filteredexprdata$rowsum > 3,]
filteredexprdata1 = subset(filteredexprdata1, select = -c(rowsum))
logdata = log2(filteredexprdata1 + 1)
normdata = RLE_normalization(logdata)
keknames = sub("_(.*)$", "", rownames(normdata))
rownames(normdata) = keknames
dic = Ensembl_mouse_dictionary_create(normdata)
normdata = Ensembl_to_entrez(normdata, dic)
exprforpca = data.frame(t(scale(t(normdata))))
pcamodel = prcomp(t(exprforpca))
cluster_values = as.data.frame(pcamodel[['x']])
cluster_plot = ggplot(cluster_values, aes(x = PC1, y = PC2))
color_pca = filteredphenodata[, "Age"]
cluster_plot + geom_point(aes(color = color_pca))
ggheatmap
library(reshape2)
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
# Reorder the correlation matrix
cormatrix <- reorder_cormat(cormatrix)
upper_tri <- get_upper_tri(cormatrix)
# Melt the correlation matrix
#melted_cormat <- melt(upper_tri, na.rm = TRUE)
melted_cormat <- melt(cormatrix, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var1, Var2, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Spearman\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggheatmap
cormatrix = t(cormatrix)
upper_tri <- get_upper_tri(cormatrix)
# Melt the correlation matrix
#melted_cormat <- melt(upper_tri, na.rm = TRUE)
melted_cormat <- melt(cormatrix, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Spearman\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggheatmap
cormatrix <- round(cor(logFCmatrix, method = "spearman"),2)
library(reshape2)
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
# Reorder the correlation matrix
cormatrix <- reorder_cormat(cormatrix)
cormatrix = apply(cormatrix, 2, rev)
upper_tri <- get_upper_tri(cormatrix)
# Melt the correlation matrix
#melted_cormat <- melt(upper_tri, na.rm = TRUE)
melted_cormat <- melt(cormatrix, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Spearman\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue4", high = "red4", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Spearman\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Spearman\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggheatmap
install.packages("VennDiagram")
library(VennDiagram)
venn.diagram(rownames(sanya_kidney_3ages), rownames(sanya_liver_6ages))
venn.diagram(
x = list(rownames(sanya_kidney_3ages), rownames(sanya_liver_6ages)),
category.names = c("sanya_kidney" , "sanya_liver"),
filename = '#14_venn_diagramm.png',
output=TRUE
)
venn.diagram(
x = list(rownames(sanya_kidney_3ages), rownames(sanya_liver_6ages)),
category.names = c("sanya_kidney" , "sanya_liver"),
output=TRUE
)
venn.diagram(
x = list(rownames(sanya_kidney_3ages), rownames(sanya_liver_6ages)),
category.names = c("sanya_kidney" , "sanya_liver"),
filename = '#13_venn_diagramm.png',
output=TRUE
)
install.packages("cairoDevice")
library(cairoDevice)
install.packages("cairoDevice")
venn.diagram(
x = list(rownames(sanya_kidney_3ages), rownames(sanya_liver_6ages)),
category.names = c("sanya_kidney" , "sanya_liver"),
filename = 'venn_diagramm.png',
output=TRUE
)
venn.diagram(
x = list(rownames(sanya_kidney_3ages), rownames(sanya_liver_6ages)),
category.names = c("sanya_kidney" , "sanya_liver"),
filename = 'venn_diagramm.png', imagetype = "png"
output=TRUE
)
venn.diagram(
x = list(rownames(sanya_kidney_3ages), rownames(sanya_liver_6ages)),
category.names = c("sanya_kidney" , "sanya_liver"),
filename = 'venn_diagramm.png', imagetype = "png",
output=TRUE
)
View(sanya_kidney_3ages)
venn.diagram(
x = list(rownames(subset(sanya_kidney_3ages, sanya_kidney_3ages$logFC > 0 & sanya_kidney_3ages$FDR < 0.05)), rownames(subset(sanya_liver_6ages, sanya_liver_6ages$logFC > 0 & sanya_liver_6ages$FDR < 0.05))),
category.names = c("sanya_kidney" , "sanya_liver"),
filename = 'venn_diagramm_up.png', imagetype = "png",
output=TRUE
)
venn.diagram(
x = list(rownames(subset(sanya_kidney_3ages, sanya_kidney_3ages$logFC > 0 & sanya_kidney_3ages$FDR < 0.05)), rownames(subset(sanya_liver_6ages, sanya_liver_6ages$logFC > 0 & sanya_liver_6ages$FDR < 0.05))),
category.names = c("sanya_kidney" , "sanya_liver"), fill = c(alpha("#440154ff",0.3), alpha('#21908dff',0.3)),
filename = 'venn_diagramm_up.png', imagetype = "png",
output=TRUE
)
venn.diagram(
x = list(rownames(subset(sanya_kidney_3ages, sanya_kidney_3ages$logFC > 0 & sanya_kidney_3ages$FDR < 0.05)), rownames(subset(sanya_liver_6ages, sanya_liver_6ages$logFC > 0 & sanya_liver_6ages$FDR < 0.05))),
category.names = c("sanya_kidney" , "sanya_liver"), fill = c(alpha("#440154ff",0.3), alpha('#21908dff',0.3)),
filename = 'venn_diagramm_up.png', imagetype = "png",
output=TRUE
)
venn.diagram(
x = list(rownames(subset(sanya_kidney_3ages, sanya_kidney_3ages$logFC < 0 & sanya_kidney_3ages$FDR < 0.05)), rownames(subset(sanya_liver_6ages, sanya_liver_6ages$logFC < 0 & sanya_liver_6ages$FDR < 0.05))),
category.names = c("sanya_kidney" , "sanya_liver"), fill = c(alpha("#440154ff",0.3), alpha('#21908dff',0.3)),
filename = 'venn_diagramm_down.png', imagetype = "png",
output=TRUE
)
